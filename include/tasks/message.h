/* message.h - definitions for all message structs */

#ifndef __MESSAGE__H__
#define __MESSAGE__H__

#include <config/train_constants.h>

#define MAX_MESSAGE_SIZE (2048 * 8)

#define MESSAGE_SEMANTIC_MASK 0xFFFF
#define MESSAGE_SEMANTIC_SHIFT 0
#define MESSAGE_TARGET_MASK 0xFF0000
#define MESSAGE_TARGET_SHIFT 8
#define MESSAGE_STRUCT_MASK 0xFF000000
#define MESSAGE_STRUCT_SHIFT 16

#define STRUCT_EMPTY_MESSAGE 					0x01000000
#define STRUCT_NAMESERVER_MESSAGE 				0x02000000
#define STRUCT_NUMBER_MESSAGE 					0x03000000
#define STRUCT_TWO_NUMBER_MESSAGE 				0x04000000
#define STRUCT_SHORT_STR_MESSAGE 				0x05000000
#define STRUCT_EXTRA_LONG_STR_MESSAGE 			0x06000000
#define STRUCT_CHAR_MESSAGE 					0x07000000
#define STRUCT_SENSOR_REPLY_MESSAGE 			0x08000000
#define STRUCT_SENSOR_LIST_MESSAGE 				0x09000000
#define STRUCT_SENSOR_WATCH_MESSAGE 			0x0A000000
#define STRUCT_TRAIN_POSITION_OUTPUT_MESSAGE 	0x0B000000
#define STRUCT_TRAIN_ROUTE_REQUEST_MESSAGE 		0x0C000000
#define STRUCT_TRAIN_ROUTE_MESSAGE 				0x0D000000
#define STRUCT_TRAIN_RESERVATION_REQUEST_MESSAGE 0x0E000000
#define STRUCT_TRAIN_RESERVATION_UPDATE_MESSAGE 0x0F000000
#define STRUCT_SENSOR_WATCH_REPLY_MESSAGE		0x10000000
#define STRUCT_POSITION_AND_TRAIN_MESSAGE		0x11000000


#define TARGET_NAME_SERVER 0x00010000
#define TARGET_CLOCK_SERVER 0x00020000
#define TARGET_SEND_SERVER 0x00030000
#define TARGET_RECV_SERVER 0x00040000
#define TARGET_PRINT_SERVER 0x00050000
#define TARGET_PRINT_NOTIFIER 0x00060000
#define TARGET_COURIER 0x00070000
#define TARGET_INPUT_SERVER 0x00080000
#define TARGET_UART1_PRINT_SERVER 0x00090000
#define TARGET_UART1_PRINT_NOTIFIER 0x000A0000
#define TARGET_UART1_INPUT_SERVER 0x000B0000
#define TARGET_TRAIN_SERVER 0x000C0000
#define TARGET_TRAIN_WORKER 0x000D0000
#define TARGET_SENSOR_SERVER 0x000E0000
#define TARGET_SENSOR_INTERPRETER 0x000F0000
#define TARGET_TRAIN 0x00100000
#define TARGET_ROUTE_SERVER 0x00200000

#define SEMANTIC_INVALID_OPERATION 0x0001
#define SEMANTIC_ACK 0x0002

//nameserver message length
#define CONFIG_NAMESRV_NAME_LENGTH 15

#define CONFIG_SHORT_STR_MSG_LENGTH 16
#define CONFIG_MEDIUM_STR_MSG_LENGTH 50
#define CONFIG_EXTRA_LONG_STR_MSG_LENGTH 1025

#define CONFIG_SENSOR_LIST_LENGTH 7

#define CONFIG_SENSOR_INTERPRETER_MAX_SENSOR_WATCHES 10


#define EMPTY_MESSAGE (STRUCT_EMPTY_MESSAGE)
#define ACK_MESSAGE (STRUCT_EMPTY_MESSAGE | SEMANTIC_ACK)
#define REGISTERAS_MESSAGE (TARGET_NAME_SERVER | STRUCT_NAMESERVER_MESSAGE | 0x10) 
#define WHOIS_MESSAGE (TARGET_NAME_SERVER | STRUCT_NAMESERVER_MESSAGE | 0x11)
#define NUMBER_MESSAGE (STRUCT_NUMBER_MESSAGE)
#define INVALID_OPERATION_MESSAGE (STRUCT_EMPTY_MESSAGE | SEMANTIC_INVALID_OPERATION)
#define TWO_NUMBER_MESSAGE (STRUCT_TWO_NUMBER_MESSAGE)

#define RECV_MESSAGE (TARGET_RECV_SERVER | STRUCT_SHORT_STR_MESSAGE | 0x10)

#define CLOCK_TICK_MESSAGE (TARGET_CLOCK_SERVER | STRUCT_SHORT_STR_MESSAGE  | 0x10) 
#define CLOCK_TIME_MESSAGE (TARGET_CLOCK_SERVER | STRUCT_EMPTY_MESSAGE | 0x11) 
#define CLOCK_DELAY_MESSAGE (TARGET_CLOCK_SERVER | STRUCT_NUMBER_MESSAGE | 0x12)
#define CLOCK_DELAY_UNTIL_MESSAGE (TARGET_CLOCK_SERVER | STRUCT_NUMBER_MESSAGE | 0x13)
#define CLOCK_TIME_REPLY (TARGET_CLOCK_SERVER | STRUCT_NUMBER_MESSAGE | 0x14)
#define CLOCK_WAKEUP (TARGET_CLOCK_SERVER | STRUCT_NUMBER_MESSAGE | 0x15)

#define PRINT_SERVER_STRING_MESSAGE (TARGET_PRINT_SERVER | STRUCT_EXTRA_LONG_STR_MESSAGE | 0x10)
#define PRINT_SERVER_OUTPUT_MESSAGE (TARGET_PRINT_NOTIFIER | STRUCT_SHORT_STR_MESSAGE | 0x11)
#define PRINT_SERVER_STRING_REPLY (STRUCT_NUMBER_MESSAGE | 0x12)

#define UART1_PRINT_SERVER_INPUT_MESSAGE (TARGET_UART1_PRINT_NOTIFIER | STRUCT_CHAR_MESSAGE | 0x10)
#define UART1_PRINT_SERVER_OUTPUT_MESSAGE (TARGET_UART1_PRINT_NOTIFIER | STRUCT_CHAR_MESSAGE | 0x11)
#define UART1_PRINT_SERVER_INPUT_REPLY (STRUCT_CHAR_MESSAGE | 0x12)


#define INPUT_SERVER_NOTIFY_MESSAGE (TARGET_INPUT_SERVER | STRUCT_SHORT_STR_MESSAGE | 0x10)
#define INPUT_SERVER_GETC_REQUEST_MESSAGE (TARGET_INPUT_SERVER | STRUCT_EMPTY_MESSAGE | 0x11)
#define INPUT_SERVER_GETC_REPLY_MESSAGE (TARGET_INPUT_SERVER | STRUCT_CHAR_MESSAGE | 0x12)

#define UART1_INPUT_SERVER_NOTIFY_MESSAGE (TARGET_UART1_INPUT_SERVER | STRUCT_CHAR_MESSAGE | 0x10)
#define UART1_INPUT_SERVER_GETC_REQUEST_MESSAGE (TARGET_UART1_INPUT_SERVER | STRUCT_EMPTY_MESSAGE | 0x11)
#define UART1_INPUT_SERVER_GETC_REPLY_MESSAGE (TARGET_UART1_INPUT_SERVER | STRUCT_CHAR_MESSAGE | 0x12)


#define COURIER_INIT_MESSAGE (STRUCT_TWO_NUMBER_MESSAGE | TARGET_COURIER | 0x1000) 
#define COURIER_MESSAGE (STRUCT_EMPTY_MESSAGE | 0x1000)

#define DELAY_WORKER_MESSAGE (STRUCT_TWO_NUMBER_MESSAGE | 0x1001)

#define TRAIN_INIT_MESSAGE (STRUCT_TWO_NUMBER_MESSAGE | TARGET_TRAIN | 0x1002) 

#define ABORT_MESSAGE (STRUCT_EMPTY_MESSAGE | 0x1003)

#define HIJACK_MESSAGE (STRUCT_EMPTY_MESSAGE | 0x1004)

#define TRAIN_CTRL_MESSAGE (STRUCT_TWO_NUMBER_MESSAGE | 0x110)
#define SWITCH_CTRL_MESSAGE (STRUCT_TWO_NUMBER_MESSAGE | 0x111)
#define QUERY_ALL_SENSORS_MESSAGE (STRUCT_TWO_NUMBER_MESSAGE | 0x112)
#define SINGLE_SENSOR_QUERY_MESSAGE (STRUCT_TWO_NUMBER_MESSAGE |  0x113)
#define SENSOR_REPLY_MESSAGE (STRUCT_SENSOR_REPLY_MESSAGE | 0x114)
#define TRAIN_REVERSE_MESSAGE (STRUCT_TWO_NUMBER_MESSAGE | 0x115)
#define SWITCH_STATUS_MESSAGE (STRUCT_TWO_NUMBER_MESSAGE | 0x116)
#define SENSOR_REGISTER_MESSAGE (STRUCT_EMPTY_MESSAGE | TARGET_SENSOR_SERVER | 0x117)
#define SENSOR_WATCH_MESSAGE ( STRUCT_SENSOR_WATCH_MESSAGE | TARGET_SENSOR_INTERPRETER | 0x10 )
#define SENSOR_WATCH_REPLY_MESSAGE ( STRUCT_SENSOR_WATCH_REPLY_MESSAGE | 0x200)


#define TRAIN_ADD_MESSAGE (STRUCT_TWO_NUMBER_MESSAGE | 0x118)
#define TRAIN_SOS_MESSAGE (STRUCT_TWO_NUMBER_MESSAGE | 0x119)
#define TRAIN_DOESNT_EXIST_MESSAGE (STRUCT_NUMBER_MESSAGE | 0x120)
#define TRAIN_PRINT_CALIBRATION_MESSAGE (STRUCT_TWO_NUMBER_MESSAGE | 0x121)
#define TRAIN_GUESS_POSITION_MESSAGE (STRUCT_NUMBER_MESSAGE | 0x122)
#define TRAIN_GUESS_POSITION_RESPONSE_MESSAGE (STRUCT_TWO_NUMBER_MESSAGE | 0x123)
#define TRAIN_POSITION_OUTPUT_MESSAGE (STRUCT_TRAIN_POSITION_OUTPUT_MESSAGE | 0x124)
#define TRAIN_ROUTE_DESTINATION_MESSAGE (STRUCT_TWO_NUMBER_MESSAGE | 0x125)
#define TRAIN_DIRECTION_MESSAGE (STRUCT_TWO_NUMBER_MESSAGE | 0x126)
#define TRAIN_OUTPUT_REGISTER_MESSAGE (STRUCT_TWO_NUMBER_MESSAGE | 0x127)

#define ROUTE_SERVER_INIT_MESSAGE (STRUCT_NUMBER_MESSAGE | TARGET_ROUTE_SERVER | 0x0300)
#define TRAIN_ROUTE_REQUEST_MESSAGE (STRUCT_TRAIN_ROUTE_REQUEST_MESSAGE | TARGET_ROUTE_SERVER | 0x0301)
#define TRAIN_ROUTE_FREE_RESERVATION_MESSAGE (STRUCT_TWO_NUMBER_MESSAGE | TARGET_ROUTE_SERVER | 0x0302)
#define TRAIN_ROUTE_RESERVATION_REQUEST_MESSAGE (STRUCT_TRAIN_RESERVATION_REQUEST_MESSAGE | TARGET_ROUTE_SERVER | 0xF303)
#define TRAIN_ROUTE_RESERVE_WHERE_I_AM_MESSAGE (STRUCT_TWO_NUMBER_MESSAGE | TARGET_ROUTE_SERVER | 0x9000)
#define TRAIN_ROUTE_RESERVE_WHERE_I_AM_POS_MESSAGE (STRUCT_POSITION_AND_TRAIN_MESSAGE | TARGET_ROUTE_SERVER | 0x9000)


#define TRAIN_ROUTE_DEBUG_RESERVE_MESSAGE (STRUCT_TWO_NUMBER_MESSAGE | TARGET_ROUTE_SERVER | 0x0304)
#define TRAIN_ROUTE_DEBUG_FREE_MESSAGE (STRUCT_TWO_NUMBER_MESSAGE | TARGET_ROUTE_SERVER | 0x0305)

#define TRAIN_ROUTE_MESSAGE (STRUCT_EMPTY_MESSAGE | TARGET_TRAIN | 0x0303)
#define TRAIN_ROUTE_RESERVATION_UPDATE_MESSAGE (STRUCT_TWO_NUMBER_MESSAGE | TARGET_TRAIN | 0x0301)

#define TAB_ENABLE_MESSAGE (STRUCT_EMPTY_MESSAGE | 0x0400)
#define TAB_DISABLE_MESSAGE (STRUCT_EMPTY_MESSAGE | 0x0401)
#define TAB_REGISTER_MESSAGE (STRUCT_SHORT_STR_MESSAGE | 0x0402)
#define TAB_LEFT_MESSAGE (STRUCT_EMPTY_MESSAGE | 0x0403)
#define TAB_RIGHT_MESSAGE (STRUCT_EMPTY_MESSAGE | 0x0404)
#define RESERVATION_TAB_INIT_MESSAGE (STRUCT_NUMBER_MESSAGE | 0x0405)


//GAME MESSAGES
#define GAME_MOVE_UP (STRUCT_EMPTY_MESSAGE | 0x0500)
#define GAME_MOVE_DOWN (STRUCT_EMPTY_MESSAGE | 0x0501)
#define GAME_MOVE_LEFT (STRUCT_EMPTY_MESSAGE | 0x0502)
#define GAME_MOVE_RIGHT (STRUCT_EMPTY_MESSAGE | 0x0503)
#define GAME_FIRE (STRUCT_EMPTY_MESSAGE | 0x0504)
#define GAME_NEW (STRUCT_EMPTY_MESSAGE | 0x0505)

#define GAME_AI_REGISTER_TRAIN (STRUCT_TWO_NUMBER_MESSAGE | 0x0510)
#define GAME_FINISHED_ROUTE_MESSAGE (STRUCT_TWO_NUMBER_MESSAGE | 0x0511)
#define GAME_WON_MESSAGE (STRUCT_TWO_NUMBER_MESSAGE | 0x0512)

#define GAME_REPAIRING_MESSAGE (STRUCT_TWO_NUMBER_MESSAGE | 0x0520)
#define GAME_REPAIRING_FAILED_MESSAGE (STRUCT_TWO_NUMBER_MESSAGE | 0x0521)
#define GAME_REPAIRED_MESSAGE (STRUCT_TWO_NUMBER_MESSAGE | 0x0522)
#define GAME_DESTROYED_MESSAGE (STRUCT_TWO_NUMBER_MESSAGE | 0x0523)

#define TRAIN_WORKER_TRAIN_REVERSE_MESSAGE (STRUCT_TWO_NUMBER_MESSAGE | TARGET_TRAIN_WORKER | 0x15)

#define SENSOR_SERVER_LAST_SENSOR_QUERY_MESSAGE (STRUCT_EMPTY_MESSAGE | TARGET_SENSOR_SERVER | 0x11)
#define SENSOR_SERVER_LAST_SENSOR_REPLY_MESSAGE (STRUCT_NUMBER_MESSAGE | 0x20)

#define SENSOR_SERVER_REGISTER_MESSAGE ( STRUCT_EMPTY_MESSAGE | TARGET_SENSOR_SERVER | 0x12 )
#define SENSOR_SERVER_SENSOR_LIST_MESSAGE ( STRUCT_NUMBER_MESSAGE | 0x21 )



//Sensor watch request types
#define SENSOR_WATCH_TYPE_EXPIRED 0
#define SENSOR_WATCH_TYPE_SENSOR 10
#define SENSOR_WATCH_TYPE_SENSOR_TIMEOUT 20
#define SENSOR_WATCH_TYPE_UNATTRIBUTED_SENSOR 30

struct empty_message {
	int message_type;
};

//REGISTERAS_MESSAGE or WHOIS_MESSAGE
struct nameserver_message {
	int message_type;
	char name[CONFIG_NAMESRV_NAME_LENGTH];
};

struct number_message {
	int message_type;
	int num;
};

struct two_number_message {
	int message_type;
	int num1;
	int num2;
};

struct short_str_message {
	int message_type;
	char str[CONFIG_SHORT_STR_MSG_LENGTH];
};

struct extra_long_str_message {
	int message_type;
	char str[CONFIG_EXTRA_LONG_STR_MSG_LENGTH];
};

struct char_message {
	int message_type;
	char c;
};

struct sensor_reply_message {
	int message_type;
	char sensordata[CONFIG_SENSOR_RESULT_LENGTH];
	int time;
};

struct sensor_list_message {
	int message_type;
	int sensor_list[CONFIG_SENSOR_LIST_LENGTH];
	int time;
};

struct sensor_watch_message {
	int message_type;
	int type;	
	int num_sensors;
	int sensors[CONFIG_SENSOR_INTERPRETER_MAX_SENSOR_WATCHES];
	int timeout;
	int tid;	
	int waketime;
	int id; //ID sent be user
};

struct sensor_watch_reply_message {
	int message_type;
	int sensor;
	int id;
	int time; //time sensor trigger was received
};

struct train_position_output_message {
	int message_type;
	
	int train_nums;
	int train_speeds;
	char train_pos_node[6];
	int train_pos_off;
	int train_err;
	int train_max_err;
	char train_dest_node[6];
	int train_dest_off;
	char train_state[6];
};

struct train_route_request_message {
	int message_type;
	int train;
	struct position pos1, pos2;
	int train_tid;
	struct train_route * route;
	int requested_route_length;
};

struct train_reservation_request_message {
	int message_type;
	int train;
	struct position pos;
	int requested_route_length;
};

struct train_reservation_update_message {
	int message_type;
	int node;
	int edge;
	int length_reserved;
};

struct position_and_train_message {
	int message_type;
	int train_number;
	struct position pos;
};
#endif

